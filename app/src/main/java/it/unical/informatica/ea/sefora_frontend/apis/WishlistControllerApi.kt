/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package it.unical.informatica.ea.sefora_frontend.apis

import it.unical.informatica.ea.sefora_frontend.BuildConfig
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import okhttp3.HttpUrl
import okhttp3.OkHttpClient
import it.unical.informatica.ea.sefora_frontend.infrastructure.ApiClient
import it.unical.informatica.ea.sefora_frontend.infrastructure.ApiResponse
import it.unical.informatica.ea.sefora_frontend.infrastructure.ClientError
import it.unical.informatica.ea.sefora_frontend.infrastructure.ClientException
import it.unical.informatica.ea.sefora_frontend.infrastructure.MultiValueMap
import it.unical.informatica.ea.sefora_frontend.infrastructure.RequestConfig
import it.unical.informatica.ea.sefora_frontend.infrastructure.RequestMethod
import it.unical.informatica.ea.sefora_frontend.infrastructure.ResponseType
import it.unical.informatica.ea.sefora_frontend.infrastructure.ServerError
import it.unical.informatica.ea.sefora_frontend.infrastructure.ServerException
import it.unical.informatica.ea.sefora_frontend.infrastructure.Success
import it.unical.informatica.ea.sefora_frontend.models.WishlistDto
import kotlinx.coroutines.withContext
import java.io.IOException

class WishlistControllerApi(
    basePath: kotlin.String = defaultBasePath,
    client: OkHttpClient = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, BuildConfig.SERVER_ADDRESS)
        }
    }

    /**
     *
     *
     * @param productId
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    suspend fun addProductToWishlist(productId: kotlin.Long, token: String) = withContext(Dispatchers.IO){
        val localVarResponse = addProductToWishlistWithHttpInfo(productId = productId, token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>)
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param productId
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addProductToWishlistWithHttpInfo(productId: kotlin.Long, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = addProductToWishlistRequestConfig(productId = productId, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation addProductToWishlist
     *
     * @param productId
     * @return RequestConfig
     */
    fun addProductToWishlistRequestConfig(productId: kotlin.Long, token : String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
                .apply {
                    put("productId", listOf(productId.toString()))
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/wishlist/addProduct",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param userEmail
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun addUserThroughEmailToWishlist(userEmail: kotlin.String, token : String) = runBlocking(Dispatchers.IO) {
        val localVarResponse = addUserThroughEmailToWishlistWithHttpInfo(userEmail = userEmail, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>)
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param userEmail
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addUserThroughEmailToWishlistWithHttpInfo(userEmail: kotlin.String, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = addUserThroughEmailToWishlistRequestConfig(userEmail = userEmail, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation addUserThroughEmailToWishlist
     *
     * @param userEmail
     * @return RequestConfig
     */
    fun addUserThroughEmailToWishlistRequestConfig(userEmail: kotlin.String, token : String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
                .apply {
                    put("userEmail", listOf(userEmail.toString()))
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/wishlist/addUserByEmail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param userId
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun addUserToWishlist(userId: kotlin.Long, token: String): kotlin.String  = runBlocking(Dispatchers.IO) {
        val localVarResponse = addUserToWishlistWithHttpInfo(userId = userId, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param userId
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addUserToWishlistWithHttpInfo(userId: kotlin.Long, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = addUserToWishlistRequestConfig(userId = userId, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation addUserToWishlist
     *
     * @param userId
     * @return RequestConfig
     */
    fun addUserToWishlistRequestConfig(userId: kotlin.Long, token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
                .apply {
                    put("userId", listOf(userId.toString()))
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/wishlist/addUser",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param wishlistDto
     * @return WishlistDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun createWishlist(wishlistDto: WishlistDto, token: String): WishlistDto  = runBlocking(Dispatchers.IO) {
        val localVarResponse = createWishlistWithHttpInfo(wishlistDto = wishlistDto, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WishlistDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param wishlistDto
     * @return ApiResponse<WishlistDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createWishlistWithHttpInfo(wishlistDto: WishlistDto, token: String): ApiResponse<WishlistDto?> {
        val localVariableConfig = createWishlistRequestConfig(wishlistDto = wishlistDto, token = token)

        return request<WishlistDto, WishlistDto>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation createWishlist
     *
     * @param wishlistDto
     * @return RequestConfig
     */
    fun createWishlistRequestConfig(wishlistDto: WishlistDto, token: String): RequestConfig<WishlistDto> {
        val localVariableBody = wishlistDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/wishlist",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param id
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun deleteWishlist(id: kotlin.Long, token: String): kotlin.String  = runBlocking(Dispatchers.IO) {
        val localVarResponse = deleteWishlistWithHttpInfo(id = id, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param id
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteWishlistWithHttpInfo(id: kotlin.Long, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = deleteWishlistRequestConfig(id = id, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation deleteWishlist
     *
     * @param id
     * @return RequestConfig
     */
    fun deleteWishlistRequestConfig(id: kotlin.Long, token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/wishlist/{id}".replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @return kotlin.collections.List<WishlistDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    suspend fun getAllAccessibleWishlists(token: String): kotlin.collections.List<WishlistDto> = withContext(Dispatchers.IO) {
        val localVarResponse = getAllAccessibleWishlistsWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<WishlistDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @return ApiResponse<kotlin.collections.List<WishlistDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAllAccessibleWishlistsWithHttpInfo(token: String): ApiResponse<kotlin.collections.List<WishlistDto>?> {
        val localVariableConfig = getAllAccessibleWishlistsRequestConfig(token = token)

        return request<Unit, kotlin.collections.List<WishlistDto>>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation getAllAccessibleWishlists
     *
     * @return RequestConfig
     */
    fun getAllAccessibleWishlistsRequestConfig(token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/wishlist/accessible",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @return kotlin.collections.List<WishlistDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun getCurrentUserWishlists(token: String): kotlin.collections.List<WishlistDto>  = runBlocking(Dispatchers.IO) {
        val localVarResponse = getCurrentUserWishlistsWithHttpInfo(token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<WishlistDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @return ApiResponse<kotlin.collections.List<WishlistDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCurrentUserWishlistsWithHttpInfo(token: String): ApiResponse<kotlin.collections.List<WishlistDto>?> {
        val localVariableConfig = getCurrentUserWishlistsRequestConfig(token = token)

        return request<Unit, kotlin.collections.List<WishlistDto>>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation getCurrentUserWishlists
     *
     * @return RequestConfig
     */
    fun getCurrentUserWishlistsRequestConfig(token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/wishlist/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @return WishlistDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun getPersonalWishlist(token: String): WishlistDto = runBlocking(Dispatchers.IO){
        val localVarResponse = getPersonalWishlistWithHttpInfo(token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WishlistDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @return ApiResponse<WishlistDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPersonalWishlistWithHttpInfo(token: String): ApiResponse<WishlistDto?> {
        val localVariableConfig = getPersonalWishlistRequestConfig(token = token)

        return request<Unit, WishlistDto>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation getPersonalWishlist
     *
     * @return RequestConfig
     */
    fun getPersonalWishlistRequestConfig(token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/wishlist/personal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @return kotlin.collections.List<WishlistDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun getSharedWishlists(token: String): kotlin.collections.List<WishlistDto> = runBlocking(Dispatchers.IO) {
        val localVarResponse = getSharedWishlistsWithHttpInfo(token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<WishlistDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @return ApiResponse<kotlin.collections.List<WishlistDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSharedWishlistsWithHttpInfo(token: String): ApiResponse<kotlin.collections.List<WishlistDto>?> {
        val localVariableConfig = getSharedWishlistsRequestConfig(token = token)

        return request<Unit, kotlin.collections.List<WishlistDto>>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation getSharedWishlists
     *
     * @return RequestConfig
     */
    fun getSharedWishlistsRequestConfig(token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/wishlist/shared",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param id
     * @return WishlistDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun getWishlistById(id: kotlin.Long): WishlistDto {
        val localVarResponse = getWishlistByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WishlistDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param id
     * @return ApiResponse<WishlistDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWishlistByIdWithHttpInfo(id: kotlin.Long): ApiResponse<WishlistDto?> {
        val localVariableConfig = getWishlistByIdRequestConfig(id = id)

        return request<Unit, WishlistDto>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation getWishlistById
     *
     * @param id
     * @return RequestConfig
     */
    fun getWishlistByIdRequestConfig(id: kotlin.Long): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/wishlist/{id}".replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param productId
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun removeProductFromWishlist(productId: kotlin.Long, token: String) = runBlocking(Dispatchers.IO) {
        val localVarResponse = removeProductFromWishlistWithHttpInfo(productId = productId, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>)
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param productId
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeProductFromWishlistWithHttpInfo(productId: kotlin.Long, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = removeProductFromWishlistRequestConfig(productId = productId, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation removeProductFromWishlist
     *
     * @param productId
     * @return RequestConfig
     */
    fun removeProductFromWishlistRequestConfig(productId: kotlin.Long, token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
                .apply {
                    put("productId", listOf(productId.toString()))
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/wishlist/removeProduct",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param userId
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun removeUserFromWishlist(userId: kotlin.Long, token: String) = runBlocking(Dispatchers.IO) {
        val localVarResponse = removeUserFromWishlistWithHttpInfo(userId = userId, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>)
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param userId
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeUserFromWishlistWithHttpInfo(userId: kotlin.Long, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = removeUserFromWishlistRequestConfig(userId = userId, token = token)

        return request<Unit, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation removeUserFromWishlist
     *
     * @param userId
     * @return RequestConfig
     */
    fun removeUserFromWishlistRequestConfig(userId: kotlin.Long, token: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap =
            mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
                .apply {
                    put("userId", listOf(userId.toString()))
                }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/wishlist/removeUser",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    /**
     *
     *
     * @param wishlistDto
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class,
    )
    fun updateWishlist(wishlistDto: WishlistDto, token: String): kotlin.String  = runBlocking(Dispatchers.IO) {
        val localVarResponse = updateWishlistWithHttpInfo(wishlistDto = wishlistDto, token = token)

        return@runBlocking when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse,
                )
            }
        }
    }

    /**
     *
     *
     * @param wishlistDto
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateWishlistWithHttpInfo(wishlistDto: WishlistDto, token: String): ApiResponse<kotlin.String?> {
        val localVariableConfig = updateWishlistRequestConfig(wishlistDto = wishlistDto, token = token)

        return request<WishlistDto, kotlin.String>(
            localVariableConfig,
        )
    }

    /**
     * To obtain the request config of the operation updateWishlist
     *
     * @param wishlistDto
     * @return RequestConfig
     */
    fun updateWishlistRequestConfig(wishlistDto: WishlistDto, token: String): RequestConfig<WishlistDto> {
        val localVariableBody = wishlistDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"

        localVariableHeaders["Authorization"] = "Bearer $token"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/wishlist",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody,
        )
    }

    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl
            .Builder()
            .scheme("http")
            .host("localhost")
            .addPathSegment(uriComponent)
            .build()
            .encodedPathSegments[0]
}